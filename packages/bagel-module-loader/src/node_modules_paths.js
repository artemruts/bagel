/**
 *
 * @flow
 */

/*
 * Adapted (i.e. copy/pasted) from: https://github.com/substack/node-resolve by way of https://github.com/facebook/jest
 */

import path from 'path';

type NodeModulesPathsOptions = {|
  moduleDirectory?: Array<string>,
  paths?: ?Array<string>
|};

export default function nodeModulesPaths(
  basedir: string,
  options: NodeModulesPathsOptions
): string[] {
  const modules =
    options && options.moduleDirectory
      ? [].concat(options.moduleDirectory)
      : ['node_modules'];

  // ensure that `basedir` is an absolute path at this point,
  // resolving against the process' current working directory
  const basedirAbs = path.resolve(basedir);

  let prefix = '/';
  if (/^([A-Za-z]:)/.test(basedirAbs)) {
    prefix = '';
  } else if (/^\\\\/.test(basedirAbs)) {
    prefix = '\\\\';
  }

  const paths = [basedirAbs];
  let parsed = path.parse(basedirAbs);
  while (parsed.dir !== paths[paths.length - 1]) {
    paths.push(parsed.dir);
    parsed = path.parse(parsed.dir);
  }

  const dirs = paths
    .reduce((dirs, aPath) => {
      return dirs.concat(
        modules.map(moduleDir => {
          return path.isAbsolute(moduleDir)
            ? aPath === basedirAbs
              ? moduleDir
              : ''
            : path.join(prefix, aPath, moduleDir);
        })
      );
    }, [])
    .filter(dir => dir !== '');

  return options.paths ? dirs.concat(options.paths) : dirs;
}
